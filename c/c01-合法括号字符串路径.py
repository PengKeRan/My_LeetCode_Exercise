"""
2267. 检查是否有合法括号字符串路径
一个括号字符串是一个 非空且只包含'('和')'的字符串。如果下面任意条件为真，那么这个括号字符串就是合法的。

字符串是()。
字符串可以表示为AB（A连接B），A 和B都是合法括号序列。
字符串可以表示为(A)，其中A是合法括号序列。
给你一个m x n的括号网格图矩阵grid。网格图中一个合法括号路径是满足以下所有条件的一条路径：

路径开始于左上角格子(0, 0)。
路径结束于右下角格子(m - 1, n - 1)。
路径每次只会向 下或者向 右移动。
路径经过的格子组成的括号字符串是合法的。
如果网格图中存在一条 合法括号路径，请返回true，否则返回false。
"""


def hasValidPath(grid):
    """
    :type grid: List[List[str]]
    :rtype: bool
    """
    m = len(grid)
    n = len(grid[0])
    if grid[0][0] == ')' or grid[m - 1][n - 1] == '(' or (m + n) % 2 == 0:
        return False
    arr = [[[0 for k in range((m+n+1)//2)] for i in range(n)] for j in range(m)]  # 0-未访问，1-True，2-False
    def dfs(x, y, c):
        if arr[x][y][c]:
            return False
        arr[x][y][c]=True
        if x == m - 1 and y == n - 1:
            return c == 1
        if c > m - x + n - y - 1:
            return False
        if grid[x][y] == '(':
            c += 1
        else:
            c -= 1
        return c >= 0 and ((x < m - 1 and dfs(x + 1, y, c)) or (y < n - 1 and dfs(x, y + 1, c)))

    return dfs(0, 0, 0)


print(hasValidPath([["(", "(", "("], [")", "(", ")"], ["(", "(", ")"], ["(", "(", ")"]]))
print(hasValidPath(
    [["(", "(", ")", "(", ")", "(", "(", ")", "(", "(", ")", ")", ")", ")", ")", "(", ")", "(", "(", ")", "(", "(", ")",
      ")", ")", ")", ")", "(", "(", "(", "("],
     [")", "(", "(", "(", ")", "(", ")", "(", "(", ")", ")", ")", ")", "(", ")", ")", "(", "(", ")", ")", "(", ")", "(",
      ")", "(", "(", ")", "(", ")", "(", "("],
     [")", ")", "(", "(", ")", "(", "(", ")", ")", ")", ")", "(", "(", ")", ")", "(", ")", "(", ")", ")", "(", "(", "(",
      ")", ")", ")", "(", ")", ")", "(", ")"],
     ["(", "(", ")", "(", ")", "(", "(", ")", "(", "(", "(", ")", ")", "(", ")", "(", ")", ")", ")", ")", ")", ")", "(",
      "(", ")", "(", ")", "(", ")", "(", "("],
     [")", ")", "(", ")", ")", "(", "(", "(", ")", ")", "(", ")", "(", ")", ")", ")", "(", "(", "(", ")", ")", "(", ")",
      "(", ")", ")", "(", "(", "(", "(", ")"],
     [")", ")", "(", "(", ")", "(", ")", "(", ")", "(", ")", "(", ")", ")", "(", ")", "(", ")", ")", "(", ")", "(", "(",
      "(", ")", "(", ")", ")", ")", "(", "("],
     [")", "(", "(", "(", "(", "(", "(", ")", ")", "(", "(", ")", "(", ")", ")", "(", ")", ")", ")", "(", "(", "(", ")",
      "(", "(", ")", ")", "(", ")", "(", ")"],
     [")", ")", "(", "(", "(", "(", "(", "(", "(", ")", ")", "(", "(", "(", "(", "(", "(", "(", "(", "(", "(", "(", "(",
      ")", ")", "(", "(", ")", ")", "(", ")"],
     ["(", ")", ")", ")", "(", "(", ")", ")", ")", ")", "(", ")", ")", "(", ")", ")", "(", "(", "(", "(", "(", "(", "(",
      ")", ")", "(", "(", ")", ")", "(", "("],
     ["(", "(", ")", "(", ")", ")", ")", ")", "(", "(", "(", ")", ")", ")", "(", ")", "(", "(", ")", "(", "(", "(", ")",
      "(", "(", "(", "(", "(", ")", ")", ")"],
     ["(", ")", "(", "(", "(", "(", ")", "(", "(", ")", ")", "(", "(", ")", "(", "(", "(", ")", "(", "(", "(", ")", ")",
      "(", ")", ")", "(", ")", "(", "(", ")"],
     [")", ")", "(", "(", "(", "(", ")", "(", "(", ")", ")", "(", ")", ")", "(", ")", "(", "(", "(", "(", "(", "(", "(",
      ")", "(", "(", ")", ")", "(", "(", "("],
     ["(", ")", ")", ")", "(", ")", "(", "(", "(", ")", ")", ")", "(", ")", "(", ")", ")", "(", "(", "(", "(", ")", "(",
      ")", ")", ")", ")", ")", ")", "(", "("],
     ["(", "(", "(", "(", "(", "(", ")", ")", "(", ")", "(", "(", "(", ")", ")", "(", ")", "(", ")", "(", ")", "(", "(",
      "(", ")", ")", ")", "(", ")", "(", "("],
     ["(", ")", ")", ")", ")", "(", "(", ")", ")", ")", ")", ")", ")", "(", "(", ")", "(", ")", ")", "(", ")", "(", ")",
      ")", ")", "(", "(", ")", "(", "(", "("],
     ["(", ")", ")", "(", "(", ")", ")", "(", ")", ")", "(", "(", "(", ")", ")", ")", ")", "(", "(", "(", ")", ")", "(",
      ")", "(", "(", "(", "(", ")", ")", ")"],
     [")", "(", "(", ")", "(", "(", ")", ")", ")", "(", "(", "(", "(", ")", "(", ")", ")", ")", "(", ")", "(", ")", "(",
      "(", ")", "(", "(", "(", "(", "(", "("],
     ["(", ")", "(", ")", "(", "(", ")", ")", ")", ")", ")", "(", "(", ")", ")", "(", ")", "(", ")", ")", ")", ")", "(",
      "(", "(", ")", "(", ")", "(", ")", ")"],
     ["(", ")", "(", ")", ")", ")", "(", "(", "(", ")", "(", ")", "(", "(", ")", ")", "(", ")", "(", ")", "(", ")", "(",
      "(", "(", "(", "(", ")", "(", ")", "("],
     [")", ")", ")", ")", ")", "(", ")", ")", "(", "(", ")", "(", ")", ")", "(", ")", ")", "(", "(", "(", "(", ")", "(",
      "(", "(", "(", ")", ")", ")", ")", "("],
     [")", "(", "(", "(", "(", "(", ")", "(", ")", ")", ")", ")", "(", "(", "(", ")", ")", "(", ")", ")", "(", "(", "(",
      "(", "(", "(", ")", ")", "(", "(", "("],
     ["(", "(", "(", ")", ")", "(", ")", "(", ")", ")", ")", ")", "(", ")", ")", ")", ")", "(", ")", "(", "(", "(", "(",
      ")", "(", "(", "(", "(", "(", "(", ")"]]
))
